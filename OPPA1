#!/usr/bin/env python
# Time-stamp: < >

from math import exp
import time
from datetime import timedelta
import os
import sys
import argparse
import subprocess

from oppa.loadParser.loadLabel import run as loadLabel
from oppa.preProcess import run as preProcess

directory_path = ""

def main():

	# setting arguments
	arg_parser = argparse.ArgumentParser()
	arg_parser.add_argument("-t","--tool",nargs='+', help="what tool you use. : { MACS , SPP , peakSeg , HOMER}")
	arg_parser.add_argument("-i","--input", help="input alignment file. the format must be bam.")
	arg_parser.add_argument("-cr","--control", help="it is control alignment file for MACS")
	arg_parser.add_argument("-vs","--validSet", help="validation set it is labeled.")
	arg_parser.add_argument("-ct","--callType", help="decide peak call type either broad or narrow.")

	args = arg_parser.parse_args()

	# check the argument right or not
	if args.tool == None:
		print "you need '-t tool name'"
		exit()
	if args.input == None:
		print "you need '-i input_data_file'"
		exit()
	if args.validSet == None:
		print "you need '-vs label_data_file_name'. . ."
		exit()
	if not os.path.exists(args.input):
		print args.input + " : the input file is not exist"
		exit()
	if args.control is not None and not os.path.exists(args.control):
		print args.control + " : the control file is not exist"
		exit()
	if not os.path.exists(args.validSet):
		print args.validSet + " : the label data is not exist"
		exit()

	################ preprocessing step ################
	validation_set, test_set = loadLabel(args.validSet)
	global directory_path

	print "\n ===INPUT THE WORKING DIRECTORY.=== this directory will store\
		\n that splited region of input bam file and it store result to \
		\n wroking directory. you don`t have to input full path of direct\
		\n ory. if you insert just directory name , it create in current \
		\n directory."
	sys.stdout.write("\n input new directory :: ")
	directory_path = raw_input()
	directory_path = os.path.abspath(directory_path)
	
	if not os.path.exists(directory_path):
		os.makedirs(directory_path)
	
	preProcess(args.input, validation_set + test_set, directory_path)
	####################################################


	################## running step ####################
	score_list = []
	result_mac = 0
	result_spp = 0
	result_peakSeq = 0
	result_homer = 0
	
	if len(args.tool) >= 2:
		print "////////////// ENSEMBLE METHOD ON ////////////////"

	if "homer" in args.tool:
		print "////////////////// RUNNING HOMER /////////////////"
		from oppa.HOMER.learnHOMERparam import learnHOMERparam
		result_homer = learnHOMERparam(args, validation_set, test_set, directory_path)
		score_list.append(result_homer._getvalue())

	if "macs" in args.tool:
		print "///////////////// RUNNING MACS ///////////////////"
		from oppa.macs.learnMACSparam import learnMACSparam
		result_mac = learnMACSparam(args, validation_set, test_set, directory_path)
		score_list.append(result_mac._getvalue())

	if "peakSeq" in args.tool:
		print "//////////////// RUNNING PeakSeq /////////////////"

	if "spp" in args.tool:
		print "////////////////// RUNNING SPP ///////////////////"
		from oppa.spp.learnSPPparam import learnSPPparam
		result_spp = learnSPPparam(args, validation_set, test_set, directory_path)
		score_list.append(result_spp._getvalue())
	#####################################################
	

	################ Ensemble step ######################
	tool_list = sorted(args.tool)
	score_dict = dict(zip(tool_list, score_list))
	print score_dict
	#####################################################


if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write("i hope you complete. \n")
		sys.exit()
