#!/usr/bin/env python
# Time-stamp: < >

import os
import sys
import argparse
import subprocess

from oppa.loadParser.loadLabel import run as loadLabel
from oppa.preProcess import run as preProcess
from oppa.Ensembler.ensembler import ensembleMethod as ensembler

directory_path = ""

def main():

	################ setting arguments ##################

	arg_parser = argparse.ArgumentParser()
	arg_parser.add_argument("-t","--tool", nargs='+', help="what tool you use. : { MACS , SPP , SICER , HOMER }")
	arg_parser.add_argument("-i","--input", help="input alignment file. the format must be bam.")
	arg_parser.add_argument("-cr","--control", help="it is control alignment file for MACS")
	arg_parser.add_argument("-vs","--validSet", help="validation set it is labeled.")
	arg_parser.add_argument("-ct","--callType", help="decide peak call type either broad or narrow.")
	arg_parser.add_argument("-kt","--karyotype", help="input karyotype file for analyze by using karyotype.")

	args = arg_parser.parse_args()

	# check the argument right or not
	if args.tool == None:
		print "you need '-t tool name'"
		exit()
	if args.input == None:
		print "you need '-i input_data_file'"
		exit()
	if args.validSet == None:
		print "you need '-vs label_data_file_name'. . ."
		exit()
	if not os.path.exists(args.input):
		print args.input + " : the input file is not exist"
		exit()
	if args.control is not None and not os.path.exists(args.control):
		print args.control + " : the control file is not exist"
		exit()
	if not os.path.exists(args.validSet):
		print args.validSet + " : the label data is not exist"
		exit()
	####################################################


	################ preprocessing step ################
	validation_set, test_set = loadLabel(args.validSet)
	global directory_path

	print "\n             ===INPUT THE WORKING DIRECTORY.=== \n\
		\n This directory will store that splited region of input bam file and\
		\n it stores the result into wokking directory. You do not have to input\
		\n full path of directory. If you insert only directory name into\
		\n working directory, it creates results in current directory."

	sys.stdout.write("\n Input new directory :: ")
	directory_path = raw_input()
	directory_path = os.path.abspath(directory_path)
	
	if not os.path.exists(directory_path):
		os.makedirs(directory_path)

	preProcess(args.input, validation_set + test_set, directory_path, args.karyotype)
	preProcess(args.control, validation_set + test_set, directory_path, args.karyotype)
	####################################################


	################## running step ####################
	score_list = []
	
	if len(args.tool) >= 2:
		print "/////////////////// ENSEMBLE METHOD ON /////////////////////\n"

	if "homer" in args.tool:
		print "//////////////////// RUNNING HOMER /////////////////////////\n"
		from oppa.HOMER.learnHOMERparam import learnHOMERparam
		result_homer = learnHOMERparam(args, validation_set, test_set, directory_path, args.karyotype, args.callType)
		score_list.append(result_homer._getvalue())

	if "macs" in args.tool:
		print "///////////////////// RUNNING MACS /////////////////////////\n"
		from oppa.macs.learnMACSparam import learnMACSparam
		result_mac = learnMACSparam(args, validation_set, test_set, directory_path, args.karyotype, args.callType)
		score_list.append(result_mac._getvalue())

	if "peakSeq" in args.tool:
		print "//////////////////// RUNNING PeakSeq ///////////////////////\n"

	if "spp" in args.tool:
		print "////////////////////// RUNNING SPP /////////////////////////\n"
		from oppa.spp.learnSPPparam import learnSPPparam
		result_spp = learnSPPparam(args, validation_set, test_set, directory_path)
		score_list.append(result_spp._getvalue())

	if "sicer" in args.tool:
		print "///////////////////// RUNNING SICER ////////////////////////\n"
		from oppa.SICER.learnSICERparam import learnSICERparam
		result_sicer = learnSICERparam(args, validation_set, test_set, directory_path, args.karyotype)
		score_list.append(result_sicer._getvalue())
	#####################################################



	################ Ensemble step ######################
	# Check ensemble method is on or not.
	if not ( len(args.tool) >= 2 ):
		exit()

	tool_list = sorted(args.tool)
	score_dict = dict(zip(tool_list, score_list))

	print "List of tools::"
	print tool_list

	print "Score Dict::"
	print score_dict

	print "directory_path ::"
	print directory_path

	print "/////////////////////// START ENSEMBLER /////////////////////////\n"
	ensembler(tool_list, score_dict, directory_path, args)
	#####################################################


if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write("i hope you complete. \n")
		sys.exit()
