#!/usr/bin/env python
# Time-stamp: < >

from math import exp
import time
from datetime import timedelta
import os
import sys
import argparse
import subprocess

from oppa.loadParser.loadLabel import run as loadLabel
from oppa.preProcess import run as preProcess

directory_path = ""

def main():

	# setting arguments
	arg_parser = argparse.ArgumentParser()
	arg_parser.add_argument("-t","--tool",nargs='+', help="what tool you use. : { MACS , SPP , peakSeg , HOMER}")
	arg_parser.add_argument("-i","--input", help="what file you input.")
	arg_parser.add_argument("-cr","--control", help="it is control-Bam file for MACS")
	arg_parser.add_argument("-f","--format", help="input file format for : { MACS , ")
	arg_parser.add_argument("-q","--Qval", default='0.05' ,help="it is parameter that will be learned and it mean\n"
                                                "significance value in Statical solutions it is only for"
                                                ": {MACS ")
	arg_parser.add_argument("-vs","--validSet", help="validation set it is labeled. used for : { MACS , ")
	arg_parser.add_argument("-ct","--callType", help="decide peak call type either broad or narrow. used for : {MACS ")

	args = arg_parser.parse_args()

	# check the argument right or not
	if args.tool == None:
		print "you need '-t tool name'"
		exit()
	if args.input == None:
		print "you need '-i input_data_file'"
		exit()
	if args.validSet == None:
		print "you need '-vs label_data_file_name'. . ."
		exit()
	if not os.path.exists(args.input):
		print args.input + " : the input file is not exist"
		exit()
	if args.control is not None and not os.path.exists(args.control):
		print args.control + " : the control file is not exist"
		exit()
	if not os.path.exists(args.validSet):
		print args.validSet + " : the label data is not exist"
		exit()

	################ preprocessing step ################
	validation_set, test_set = loadLabel(args.validSet)
	global directory_path

	print "\n INPUT THE WORKING DIRECTORY. this directory will be stored\
		\n split region of input bam file and store result. you don`t\
		\n have to input full path of directory. but if you don`t, it\
		\n create in current directory."
	sys.stdout.write("\n input new directory :: ")
	directory_path = raw_input()
	directory_path = os.path.abspath(directory_path)
	
	if not os.path.exists(directory_path):
		os.makedirs(directory_path)
	
	preProcess(args.input, validation_set + test_set, directory_path)
	####################################################


	################## running step ####################
	score_list = []
	result_mac = 0
	result_spp = 0
	result_peakSeq = 0
	result_homer = 0
	
	if len(args.tool) > 2:
		print "////////////// ENSEMBLE METHOD ON ////////////////"

	if "macs" in args.tool:
		print "///////////// RUNNING MACS ///////////////////////"
		from oppa.macs.learnMACSparam import learnMACSparam
		result_mac = learnMACSparam(args, validation_set, test_set, directory_path)
		score_list.append(result_mac)

	if "spp" in args.tool:
		print "/////////////// RUNNING SPP //////////////////////"
		from oppa.spp.learnSPPparam import learnSPPparam
		result_spp = learnSPPparam(args, validation_set, test_set)
	
	if "peakSeq" in args.tool:
		print "/////// RUNNING PeakSeq //////////////////////////"

	if "homer" in args.tool:
		print "/////////////// RUNNING HOMER ////////////////////"
		from oppa.HOMER.learnHOMERparam import learnHOMERparam
		result_homer = learnHOMERparam(args, validation_set, test_set, directory_path)
		score_list.append(result_homer)
	#####################################################
	

	################ Ensemble step #####################

	####################################################

	# only for testing
	if "gridMACS" in args.tool:
		from oppa.macs.learnMACSparam import run as runMACS
#       	from oppa.bamtools import run as bamtools
#			bamtools(args.input)
		for i in range(30):
	   		print "Qval:"+str(exp((i+1)/100.0)-1)
	    	print runMACS(args.input, validation_set, str(float(i+1)) , args.callType ,args.control)


if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		sys.stderr.write("i hope you complete. \n")
		sys.exit()
